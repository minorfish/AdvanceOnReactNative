// 大海航术
var UIManager = require("UIManager");
// hook
(function hookUIManager() {
    const createViewOrig = UIManager.createView;
    UIManager.createView = function(tag, className, rootTag, props) {
        pushRunRecordStack('UIManager.createView');
        try {
            return createViewOrig.apply(this, arguments);
        } finally {
            popRunRecordStack();
        }
    };
    const updateViewOrig = UIManager.updateView;
    UIManager.updateView = function(tag, className, props) {
        pushRunRecordStack('UIManager.updateView');
        try {
            return updateViewOrig.apply(this, arguments);
        } finally {
            popRunRecordStack();
        }
    };
    const manageChildrenOrig = UIManager.manageChildren;
    UIManager.manageChildren = function(
        tag,
        moveFrom,
        moveTo,
        addTags,
        addIndices,
        remove,
    ) {
        pushRunRecordStack('UIManager.manageChildren');
        try {
            return manageChildrenOrig.apply(this, arguments);
        } finally {
            popRunRecordStack();
        }
    };
    const setChildrenOrig = UIManager.setChildren;
    UIManager.setChildren = function(
        containerTag,
        reactTags,
    ) {
        pushRunRecordStack('UIManager.setChildren');
        try {
            return setChildrenOrig.apply(this, arguments);
        } finally {
            popRunRecordStack();
        }
    };
    const measureOrig = UIManager.measure;
    UIManager.measure = function(
        tag,
        callback,
    ) {
        pushRunRecordStack('UIManager.measure');
        try {
            return measureOrig.apply(this, arguments);
        } finally {
            popRunRecordStack();
        }
    };
    const playTouchSoundOrig = UIManager.playTouchSound;
    UIManager.playTouchSound = function() {
        pushRunRecordStack('UIManager.playTouchSound');
        try {
            return playTouchSoundOrig.apply(this, arguments);
        } finally {
            popRunRecordStack();
        }
    };
})();

var sendFiberTree = null;
function hookInject(hook, catchErrors, rendererID) {
    sendFiberTree = catchErrors(function(fiberTreeInfo) {
        console.log('SSU', 'hook.sendFiberTree', fiberTreeInfo ? fiberTreeInfo.index : -1);
        return hook.sendFiberTree(rendererID, fiberTreeInfo);
    });
}

function hookClassInstance(clazz) {
    return function (nextProps, prevState) {
        function hookClazz(nextProps, prevState) {
            pushRunRecordStack('constructor');
            try {
                clazz.call(this, nextProps, prevState);
            } finally {
                popRunRecordStack();
            }
        };
        hookClazz.prototype = clazz.prototype;
        hookClazz.prototype.constructor = clazz;

        const {
            getDerivedStateFromProps,
            componentWillMount, UNSAFE_componentWillMount,
            componentWillReceiveProps, UNSAFE_componentWillReceiveProps,
            shouldComponentUpdate,
            componentWillUpdate, UNSAFE_componentWillUpdate,
            render,
            getSnapshotBeforeUpdate,
            componentDidMount,
            componentDidUpdate,
            componentWillUnmount,
            isReactComponent,
            setState,
            forceUpdate
        } = clazz.prototype;

        if (getDerivedStateFromProps) {
            hookClazz.prototype.getDerivedStateFromProps = function (nextProps, prevState) {
                pushRunRecordStack('getDerivedStateFromProps');
                try {
                    return getDerivedStateFromProps.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (componentWillMount) {
            hookClazz.prototype.componentWillMount = function () {
                pushRunRecordStack('componentWillMount');
                try {
                    return componentWillMount.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (UNSAFE_componentWillMount) {
            hookClazz.prototype.UNSAFE_componentWillMount = function () {
                pushRunRecordStack('UNSAFE_componentWillMount');
                try {
                    return UNSAFE_componentWillMount.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (componentWillReceiveProps) {
            hookClazz.prototype.componentWillReceiveProps = function (newProps, nextContext) {
                pushRunRecordStack('componentWillReceiveProps');
                try {
                    return componentWillReceiveProps.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (UNSAFE_componentWillReceiveProps) {
            hookClazz.prototype.UNSAFE_componentWillReceiveProps = function (newProps, nextContext) {
                pushRunRecordStack('UNSAFE_componentWillReceiveProps');
                try {
                    return UNSAFE_componentWillReceiveProps.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (shouldComponentUpdate) {
            hookClazz.prototype.shouldComponentUpdate = function (newProps, newState, nextContext) {
                pushRunRecordStack('shouldComponentUpdate');
                try {
                    return shouldComponentUpdate.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (componentWillUpdate) {
            hookClazz.prototype.componentWillUpdate = function (newProps, newState, nextContext) {
                pushRunRecordStack('componentWillUpdate');
                try {
                    return componentWillUpdate.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (UNSAFE_componentWillUpdate) {
            hookClazz.prototype.UNSAFE_componentWillUpdate = function (newProps, newState, nextContext) {
                pushRunRecordStack('UNSAFE_componentWillUpdate');
                try {
                    return UNSAFE_componentWillUpdate.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        // if (clazz.name.indexOf('App') !== -1) {
        //     debugger;
        // }

        if (render) {
            hookClazz.prototype.render = function () {
                pushRunRecordStack('render');
                try {
                    return render.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (getSnapshotBeforeUpdate) {
            hookClazz.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {
                pushRunRecordStack('getSnapshotBeforeUpdate');
                try {
                    return getSnapshotBeforeUpdate.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (componentDidMount) {
            hookClazz.prototype.componentDidMount = function () {
                pushRunRecordStack('componentDidMount');
                try {
                    return componentDidMount.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (componentDidUpdate) {
            hookClazz.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {
                pushRunRecordStack('componentDidUpdate');
                try {
                    return componentDidUpdate.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (componentWillUnmount) {
            hookClazz.prototype.componentWillUnmount = function () {
                pushRunRecordStack('componentWillUnmount');
                try {
                    return componentWillUnmount.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (isReactComponent) {
            hookClazz.prototype.isReactComponent = function () {
                pushRunRecordStack('isReactComponent');
                try {
                    return isReactComponent.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (setState) {
            hookClazz.prototype.setState = function () {
                pushRunRecordStack('setState');
                try {
                    return setState.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }

        if (forceUpdate) {
            hookClazz.prototype.forceUpdate = function () {
                pushRunRecordStack('forceUpdate');
                try {
                    return forceUpdate.apply(this, arguments);
                } finally {
                    popRunRecordStack();
                }
            }
        }
        return new hookClazz();
    };
}

const runRecordStack = [];
const runRecordHistory = [];
function pushRunRecordStack(methodName) {
    runRecordStack.push(methodName);
    runRecordHistory.push(methodName);
    console.log('SSU', 'pushRunRecordStack', methodName);
}

function popRunRecordStack() {
    runRecordStack.pop();
    runRecordHistory.push('pop()');
    console.log('SSU', 'popRunRecordStack', 'pop()');
}

function pushPopRunRecordStack(methodName) {
    pushRunRecordStack(methodName);
    popRunRecordStack();
    console.log('SSU', 'pushPopRunRecordStack', methodName, 'pop()');
}

const tagStrs = ['FunctionComponent','ClassComponent', 'IndeterminateComponent', 'HostRoot', 'HostPortal', 'HostComponent', 'HostText', 'Fragment', 'Mode',
    'ContextConsumer','ContextProvider','ForwardRef','Profiler','SuspenseComponent', 'MemoComponent', 'SimpleMemoComponent', 'LazyComponent', 'IncompleteClassComponent','DehydratedSuspenseComponent'];
function tag2String(tag: number) {
    return tagStrs[tag];
}

// copy right ReactNativeRenderer-dev.js
// Don't change these two values. They're used by React Dev Tools.
var NoEffect = /*              */ 0;
var PerformedWork = /*         */ 1;

// You can change the rest (and add more).
var Placement = /*             */ 2;
var Update = /*                */ 4;
var PlacementAndUpdate = /*    */ 6;
var Deletion = /*              */ 8;
var ContentReset = /*          */ 16;
var Callback = /*              */ 32;
var DidCapture = /*            */ 64;
var Ref = /*                   */ 128;
var Snapshot = /*              */ 256;
var Passive = /*               */ 512;

// Passive & Update & Callback & Ref & Snapshot
var LifecycleEffectMask = /*   */ 932;

// Union of all host effects
var HostEffectMask = /*        */ 1023;

var Incomplete = /*            */ 1024;
var ShouldCapture = /*         */ 2048;

var FunctionComponent = 0; // 函数式组件
var ClassComponent = 1; // Class类组件
var IndeterminateComponent = 2; // Before we know whether it is function or class // 尚不知是类组件还是函数式组件
var HostRoot = 3; // Root of a host tree. Could be nested inside another node. // 组件树根组件，可以嵌套
var HostPortal = 4; // A subtree. Could be an entry point to a different renderer. // 子树.
var HostComponent = 5; // 标准组件，如地div， span等
var HostText = 6; // 文本
var Fragment = 7; // 片段
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedSuspenseComponent = 18;

// copy right ReactNativeRenderer-dev.js

function effectTag2String(effectTag: number) {
    let effectTags = [];
    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
    if (primaryEffectTag === Placement) {
        effectTags.push('Placement');
    } else if (primaryEffectTag === Update) {
        effectTags.push('Update');
    } else if (primaryEffectTag === PlacementAndUpdate) {
        effectTags.push('PlacementAndUpdate');
    } else if (primaryEffectTag === Deletion) {
        effectTags.push('Deletion');
    }
    if ((effectTag & ContentReset) !== NoEffect) {
        effectTags.push('ContentReset');
    }
    if ((effectTag & Callback) !== NoEffect) {
        effectTags.push('Callback');
    }
    if ((effectTag & DidCapture) !== NoEffect) {
        effectTags.push('DidCapture');
    }
    if ((effectTag & Ref) !== NoEffect) {
        effectTags.push('Ref');
    }
    if ((effectTag & Snapshot) !== NoEffect) {
        effectTags.push('Snapshot');
    }
    if ((effectTag & Passive) !== NoEffect) {
        effectTags.push('Passive');
    }

    if (effectTags.length) {
        return effectTags.join(',');
    }

    return null;
}

function travelFiber(fiberNode: FiberNode, fibers: Array, id2FiberMap: Map, desc: string = null) {
    if (fiberNode) {
        if (id2FiberMap.has(fiberNode.id)) {
            const fiber = id2FiberMap.get(fiberNode.id);
            if (desc) {
                fiber.tag =`${tag2String(fiberNode.tag)}(${desc})`;
            }
        } else {
            const fiber = {
                id: fiberNode.id,
                tag: desc ? `${tag2String(fiberNode.tag)}(${desc})` : `${tag2String(fiberNode.tag)}`,
                effectTag: effectTag2String(fiberNode.effectTag),
                type: getFiberType(fiberNode),
                nativeTag: getNativeTag(fiberNode),
                return: fiberNode.return ? fiberNode.return.id : -1,
                child: fiberNode.child ? fiberNode.child.id : -1,
                sibling: fiberNode.sibling ? fiberNode.sibling.id : -1,
                alternate: fiberNode.alternate ? fiberNode.alternate.id : -1,
                firstEffect: fiberNode.firstEffect ? fiberNode.firstEffect.id : -1,
                lastEffect: fiberNode.lastEffect ? fiberNode.lastEffect.id : -1,
                nextEffect: fiberNode.nextEffect ? fiberNode.nextEffect.id : -1,
                expirationTime: fiberNode.expirationTime,
                childExpirationTime: fiberNode.childExpirationTime,
            };
            id2FiberMap.set(fiber.id, fiber);
            fibers.push(fiber);
            travelFiber(fiberNode.child, fibers, id2FiberMap);
            travelFiber(fiberNode.sibling, fibers, id2FiberMap);
            travelFiber(fiberNode.alternate, fibers, id2FiberMap);
        }
    }
}

function element2String(element) {
    return `${String(element.$$typeof)}`;
}

function getFiberType(fiber) {
    if (fiber.type) {
        if (typeof (fiber.type) === 'string') {
            // Native节点，如"RCTView"、"RCTText"
            return fiber.type;
        } else {
            if (fiber.type.displayName) {
                // function、ReactElement, 如AppContainer()、(props, context, updater)、TouchableText()、{$$typeof: Symbol(react.forward_ref), render: ƒ, displayName: "View"}、
                return fiber.type.displayName;
            } if (fiber.type.name) {
                // App(props)
                return fiber.type.name;
            } else {
                // ReactElement，如{$$typeof: Symbol(react.context), _context: {…}, _calculateChangedBits: null, …}、{$$typeof: Symbol(react.provider), _context: {…}}
                return String(fiber.type.$$typeof);
            }
        }
    } else {
        // HostRoot、HostText
        if (fiber.tag === HostText) {
            // 文本节点
            return 'RCTRawText';
        }
    }

    return '';
}

function getElementType(element) {
    const {type} = element;
    if (type) {
        if (typeof type === 'function') {
            return type.name;
        } else if (typeof type === 'symbol') {
            return String(type);
        } else if (type.displayName) {
            return type.displayName;
        } else if (type.$$typeof) {
            return String(type.$$typeof);
        }
        return String(type);
    }

    return '';
}

function getNativeTag(fiber: FiberNode) {
    if (fiber) {
        const {tag} = fiber;
        if (HostComponent === tag) {
            // const nativeFiberHostComponent: ReactNativeFiberHostComponent = fiber.stateNode;
            const nativeFiberHostComponent = fiber.stateNode;
            return getReactNativeFiberHostComponentTag(nativeFiberHostComponent);
        } else if (HostText === tag) {
            return fiber.stateNode;
        }
        return '';
    }
}

function getNativeShortTag(stateNode) {
    if (stateNode) {
        if (stateNode && typeof stateNode === 'object') {
            return stateNode._nativeTag;
        } else if (typeof stateNode === 'string' || typeof stateNode === 'number') {
            return stateNode;
        }
    }
    return null;
}

function getReactNativeFiberHostComponentTag(nativeFiberHostComponent) {
    if (nativeFiberHostComponent) {
        const {_nativeTag,_children} = nativeFiberHostComponent;
        if (_children) {
            let childrenTag = _children.map((child, index) => (child._nativeTag ? `${getReactNativeFiberHostComponentTag(child)}` : child)).join();
            if (childrenTag) {
                return `${_nativeTag}[${childrenTag}]`;
            } else {
                return `${_nativeTag}`;
            }
        } else {
            childrenTag = '';
            return `${_nativeTag}`;
        }

    }

    return '';
}

let dumpFiberTreeIndex = 0;
let workIndex = -1;
let performWorkIndex = -1;

function hookWorkIndexByDumpFiberTree() {
    //workIndex ++;
    //performWorkIndex = -1;
}

function hookPerformWorkByDumpFiberTree() {
    // performWorkIndex ++;
}

function dumpFiberTree(roots, instanceCache, create, desc, currentFiberIDs = []) {
    const fibers = [];
    const id2FiberMap = new Map();
    for (let value of roots.values()) {
        const {current, finishedWork} = value;
        travelFiber(current, fibers, id2FiberMap, 'current');
        travelFiber(finishedWork, fibers, id2FiberMap, 'finishedWork');
    }
    const doms = instanceCache ? Object.keys(instanceCache).map((key)=> (instanceCache[key])).map((fiber: FiberNode) => {
        const {stateNode} = fiber;
        const name = getFiberType(fiber);
        const id = fiber.id;
        const nativeTag = getNativeShortTag(stateNode);
        const children = typeof stateNode === 'object' ? stateNode._children.map((child) => (getNativeShortTag(child))).filter((child) => (child)) : null;
        const style =  (HostText === fiber.tag) ? { text: fiber.memoizedProps } : create(fiber.pendingProps, stateNode.viewConfig.validAttributes);
        return ({
            name,
            id,
            nativeTag,
            children,
            style
        })
    }) : [];
    const fiberTreeInfo = {
        index: dumpFiberTreeIndex ++,
        desc: `${performWorkIndex}-${desc}`,
        currentFiberIDs: [...currentFiberIDs],
        fibers,
        doms,
        runRecordStack: [...runRecordStack],
        runRecordHistory: [...runRecordHistory]
    };
    sendFiberTree(fiberTreeInfo);
    console.log('SSU', 'dumpFiberTree()', fiberTreeInfo);
    // const consoleLog = console.log;
    // console.log = function(...args) {
    //     consoleLog(...args);
    // }
}

module.exports = {
    hookInject,
    hookClassInstance,
    pushRunRecordStack,
    popRunRecordStack,
    pushPopRunRecordStack,
    // travelFiber,
    tag2String,
    effectTag2String,
    element2String,
    getFiberType,
    getElementType,
    getNativeTag,
    getNativeShortTag,
    getReactNativeFiberHostComponentTag,
    hookWorkIndexByDumpFiberTree,
    hookPerformWorkByDumpFiberTree,
    dumpFiberTree
}
